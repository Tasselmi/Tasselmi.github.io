I"^ <blockquote>
  <p>从本章开始，我的黑手就慢慢的伸向了大数据所涉及的两个最核心的问题——分布式和并行计算了。</p>
</blockquote>

<p>大数据计算涉及两个最核心的命题——分布式和并行计算。分布式是为了解决要计算的数据过大算不了的问题，并行计算是要解决计算太慢突破单机性能的问题（当然了这里面也涉及算法问题，后面再表）。当然，即便你再怎么突破，也是无法突破硬件的瓶颈的，所以归根揭底，大数据的核心命题应该是CPU和内存等硬件？</p>

<h4 id="1-理解几个核心概念">1. 理解几个核心概念</h4>
<p>1）集群</p>

<p>简单的理解，集群就是把多台计算机（服务器）拼凑在一起，它们相互合作和组合，在物理上构成了一个整体。下面是一个简单的集群示例：</p>

<p><img src="/img/my-post/20181225a.png" alt="Alt text" /></p>

<p>一个集群中的单个服务器，一般称为节点（node）。一个节点需与其它所有节点之间保持可连接性，因为任何两个节点之间都会存在通信的可能性（后面会讲原因）。</p>

<p>这里简要的谈下个人计算机和服务器。如果不详加区分，服务器跟个人计算机没什么两样，都是硬件上面装上软件。但是二者是为不同目的来设计的，个人计算机主要设计方向是长时间处理同一任务，同时界面友好。服务器的主要设计目的是同时间处理多个任务（低频率多线程），比如海量请求，另外对于稳定性和持续性也会要求较高。当然，不同的服务器也有不同的特征，比如说做计算的，那肯定是各方面都必须比较强的。这里不再展开，了解即可。</p>

<p>2）分布式</p>

<p>分布式的概念是相对于单个任务而言的，一个大任务或者复杂任务，将其按照一定的逻辑拆分成多个小任务，每个小任务单独处理，然后合并每个小结果成一个大结果。下面是一个简单的分布式架构示例：</p>

<p><img src="/img/my-post/20181225b.png" alt="Alt text" /></p>

<p>如上图，大任务被拆分后，每个小任务单独运行。每个小任务可以执行相同的操作，也可以执行不同的操作。</p>

<p>如果是每个小任务执行相同的运算操作，并且按照相同的运算合并，那么该系统便成了MapReduce结构，说到这里可能有的小伙伴就比较熟悉了，平时大家用的Apache Hadoop就是这个操作了。MapReduce在后面谈到函数式编程的时候会再讲，因为是一个可以谈很多的、很有意思的话题。</p>

<p>如果将这里的大任务替换成N多个任务，分配后执行相同的操作，直接得到结果，没有结果合并的过程，那么就成了一个负载均衡的模型。比如海量请求，通过一个中间代理将不同的请求分配到不同的机器上。实现负载均衡，要么在分发的时候确定权重，要么监测每个机器的使用状态并反馈给分发器来进行均衡（这个显然比纯粹依靠分发更科学，但是也更复杂）。负载均衡与分布式的几个显著不同是：</p>

<p>负载均衡是将多个任务进行平衡分配的机制，分布式是对于单个任务而言的
分布式有结果合并的过程（因为是处理一个任务），负载均衡直接每个结果就是独立可用的（任务各自独立）
另外，分布式一般也是和多服务器系统（可以是集群也可以不是）联系在一起的，因为子任务一般是放在不同的机器上独立运行。分布式是一种系统或者说软件层面的解构过程，而集群是一个物理概念。</p>

<p>3）并行计算</p>

<p>并行计算是在单个机器的范畴内针对单个任务而言的。比如对一个List求和，可以将这个List先分成两份，两份中各自再又分成两份，一直到无法继续分下去为止，然后每个部分同时运行。在计算大任务时，并行会比单行快。</p>

<p>4）分布式集群</p>

<p>分布式集群兼以上三个特点而有之，能够处理大型任务，而且压榨计算性能。我划重点如下：</p>

<ul>
  <li>多机器多任务处理</li>
  <li>每个单任务用分布式处理</li>
  <li>每个单机器内部实现并行计算</li>
  <li>分布式的文件系统</li>
</ul>

<h4 id="2-分布式集群模型">2. 分布式集群模型</h4>
<p>下面借助一个<code class="language-plaintext highlighter-rouge">3*3分布式集群模型</code>来厘清一些基本概念和定义：</p>

<p><img src="/img/my-post/20181225c.png" alt="Alt text" /></p>

<p><code class="language-plaintext highlighter-rouge">分片（shard）</code>：一个分片代表一组机器，分片内部各机器存储相同的数据（分布式文件系统），所有分片中的任一个想加起来等于完整的数据。集群的性能取决于分片的数量。各个分片可以具有不同的权重（比如说有的机器性能好存储空间大，那么可以权重设置高一点）。如上图，共3个分片，其中147属于一个分片，258属于一个分片，369属于一个分片。实际运行中，各分片各取一台机器共3台机器来计算，其它的机器只作为备份之用，并不参与实际计算。</p>

<p><code class="language-plaintext highlighter-rouge">节点（node）</code>：一个节点就是一台机器，上图就是一个3x3的有9个节点的分布式集群。</p>

<p><code class="language-plaintext highlighter-rouge">备份（replica）</code>：同一个分片内，各个节点互为备份，记住是互为备份，没有主次之分，因为他们是完全一模一样的，相互补位。任何时候，只要不发生故障，他们都是一模一样的，这叫同一性。上图中147互为备份。</p>

<p>一个大集群中可以有独立的子集群，运行着不同的分布式系统。比如说，可以把hadoop、ClickHouse、Kafka都部署在同一个集群上，实际情况则取决于各自安排和考虑。</p>

<h4 id="3-集群的优点及缺陷">3. 集群的优点及缺陷</h4>
<p>通过上面的这一番分析，相信对于集群的概念有了较为完整的印象了。分布式集群是为了处理大任务/复杂计算，提高计算性能和稳定性而产生的。</p>

<p>相对于分布式这个概念，分布式集群提供了分布式的文件/资源系统（将需要访问的资源分布在不同的机器上面）和备份，这样使得兼顾高性能和高可用成为了可能。试想下，如果没有分片之间的通信和分布式文件系统，那么每次都需要在每个机器的全量数据中去寻找和子任务计算相关的资源，效率低下；如果没有分片内部的备份和通信，那么一旦某个机器出现问题，其中一个子任务就直接挂了，这部分数据缺失后后面的合并结果也就失去了准确性。</p>

<p>综上，分布式集群有以下优点：</p>
<ul>
  <li>高性能（通过组装，扩大了可使用的内存和处理器数量）</li>
  <li>高可用（备份保障）</li>
  <li>高可扩展性（机器数量） 另外，一般而言集群还都拥有负载均衡和自动错误恢复个功能。</li>
</ul>

<p>但是，集群也有自己的弱点：</p>
<ul>
  <li>费钱
    <ul>
      <li>计算属性的服务器本身就比较贵，搭建一个集群那就是贵上加贵</li>
      <li>效率和可用性之间需要兼顾，对于中小公司而言，又想高性能，又想兼顾可用性，但是扩展任何一方面，那都是白花花的银子；像我们公司3台机器部署的集群（3个分片3个备份），可以说是穷人家的集群了，虽然极致压榨了性能和可用性，但是致命的是，可扩展性太差，如果后面添加机器直接能搞的人精神分裂</li>
      <li>为了提高可用性，有时候甚至需要将不同的备份部署在不同的数据中心，这对集群间的通信和数据传输也是挑战，如果配置专属网络，这又是钱</li>
    </ul>
  </li>
  <li>费人
    <ul>
      <li>虽说集群优点多，但是门槛也是有的，需要有专门的人才来维护和保障</li>
    </ul>
  </li>
</ul>

<p> </p>

:ET