<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LiangFan's Blog</title>
    <description>关于大数据、数据挖掘、数据可视化、机器学习、算法、集群、分布式计算 | LiangFan，Data Analyst &amp; Big Data Lover | 这里是 @LiangFan梁凡 的个人博客，想和你们分享一切。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 05 Jun 2020 18:47:24 +0800</pubDate>
    <lastBuildDate>Fri, 05 Jun 2020 18:47:24 +0800</lastBuildDate>
    <generator>Jekyll v4.1.0</generator>
    
      <item>
        <title>「转」史上最简单的 IntelliJ IDEA 教程</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;　　IntelliJ IDEA（简称 IDEA），是 Java 语言开发的集成环境，IDEA 在业界被公认为最好的 Java 开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE 支持、各类版本工具（Git、SVN、GitHub 等）、JUnit、CVS 整合、代码分析和创新的 GUI 设计等方面的功能都值得称道。至于 Eclipse 本人接触的不多，因此也无法比较，但殊途同归，无论选择什么集成开发环境，都是为了辅助咱们编程，所以可以说：&lt;strong&gt;没有最好的工具，只有最适合自己的工具&lt;/strong&gt;。因此，撰写本系列文章的目的很简单，就是想把自己的经验整理记录下来，当然，如果能够在此基础上帮助大家快速入门并掌握 Intellij IDEA 那就再好不过啦！&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;温馨提示&lt;/strong&gt;：此教程使用的工具为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntelliJ IDEA 2017(.1.5)&lt;/code&gt;版本&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;官网地址&lt;/strong&gt;：http://www.jetbrains.com/idea/download&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;索引&quot;&gt;索引&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#基础教程&quot;&gt;基础教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#实用技巧&quot;&gt;实用技巧&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#疑难杂症&quot;&gt;疑难杂症&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#星路历程&quot;&gt;星路历程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;基础教程&quot;&gt;基础教程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;安装 IDE 的方法
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/install-intellij-idea-on-windows.md&quot;&gt;基于 Windows 系统安装 IntelliJ IDEA 的方法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/install-pycharm-on-mac.md&quot;&gt;基于 Mac 系统安装 PyCharm 的方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;初识 IDEA 的世界
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/first-run-idea.md&quot;&gt;首次运行 IntelliJ IDEA 示例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;核心文件讲解
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/core-file-talk.md&quot;&gt;IntelliJ IDEA 安装目录的核心文件讲解&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使用界面介绍
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/use-face.md&quot;&gt;详述 IntelliJ IDEA 的使用界面&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第一个项目 HelloWorld
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/hello-world.md&quot;&gt;HelloWorld 项目创建及相关配置文件介绍&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;设置主题和字体
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/theme-and-font.md&quot;&gt;设置 IntelliJ IDEA 主题和字体的方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;模板注释
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/modify-user-template.md&quot;&gt;修改 IntelliJ IDEA 模板注释的内容&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;常见图标介绍
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/idea-icon.md&quot;&gt;常见文件类型的图标介绍&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;缓存及索引
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/index-and-cache.md&quot;&gt;缓存和索引的介绍及清理方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;编译方式
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/compile-method.md&quot;&gt;编译方式介绍及编译器的设置和选择&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;代码调试
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/debug-skills.md&quot;&gt;详述 IntelliJ IDEA 之 Debug 篇&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;多模块项目
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/project-module.md&quot;&gt;IntelliJ IDEA 中 Project 和 Module 的概念及区别&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;版本控制
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/version-control.md&quot;&gt;详述 IntelliJ IDEA 中的版本控制机制&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;插件
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/plugins.md&quot;&gt;详述 IntelliJ IDEA 插件的安装及使用方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;创建 Maven 项目
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/maven-project.md&quot;&gt;详述 IntelliJ IDEA 创建 Maven 项目及设置 java 源目录的方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;搭建 Spring MVC 框架
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/basic-course/run-maven-springmvc.md&quot;&gt;IntelliJ IDEA 中的 Maven 项目初体验及搭建 Spring MVC 框架&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;实用技巧&quot;&gt;实用技巧&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;快捷键
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/practical-skills/keymap-mac.md&quot;&gt;Mac&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/practical-skills/keymap-windows.md&quot;&gt;Windows&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;恢复代码
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/practical-skills/recovery-code.md&quot;&gt;详述 IntelliJ IDEA 中恢复代码的方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;中文乱码问题
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/practical-skills/solve-garbled-questions.md&quot;&gt;IntelliJ IDEA 控制台输出中文乱码问题的解决方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;序列化
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/practical-skills/serialVersionUID.md&quot;&gt;详述 IntelliJ IDEA 中自动生成 serialVersionUID 的方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;代码审查
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/practical-skills/code-analysis.md&quot;&gt;详述 IntelliJ IDEA 提交代码前的 Code Analysis 机制&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;版本管理
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/practical-skills/schedule.md&quot;&gt;关于 IntelliJ IDEA 中 Schedule for Addition 的问题&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/practical-skills/version-control-color-tips.md&quot;&gt;详述 IntelliJ IDEA 版本控制不显示颜色提示的解决方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;彩色代码主题
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/practical-skills/color-code.md&quot;&gt;手把手教你设置 IntelliJ IDEA 彩色代码主题&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;远程调试
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/practical-skills/the-method-of-remote-debugging-with-idea.md&quot;&gt;详述 IntelliJ IDEA 远程调试 Tomcat 的方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;代码对比
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/practical-skills/compare-code.md&quot;&gt;利用 IntelliJ IDEA 进行代码对比的方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;依赖冲突
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/practical-skills/conflict-jar.md&quot;&gt;详述使用 IntelliJ IDEA 解决 jar 包冲突的问题&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;疑难杂症&quot;&gt;疑难杂症&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/difficult-cases/java-source.md&quot;&gt;详述 IntelliJ IDEA 遇到 java -source 1.3 中不支持某某操作的解决方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/difficult-cases/java-launch-helper.md&quot;&gt;详述 IntelliJ IDEA 遇到 JavaLaunchHelper 多种实现的解决方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/difficult-cases/keymap-delete.md&quot;&gt;详述 IntelliJ IDEA 遇到快捷键以及删除键不好使的解决方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/guobinhit/intellij-idea-tutorial/blob/master/articles/difficult-cases/unable-import-maven-project.md&quot;&gt;详述 IntelliJ IDEA 遇到 Maven 项目打开（Open）或者导入（Import）失败的解决方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;星路历程&quot;&gt;星路历程&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://starcharts.herokuapp.com/guobinhit/intellij-idea-tutorial&quot;&gt;&lt;img src=&quot;https://starcharts.herokuapp.com/guobinhit/intellij-idea-tutorial.svg&quot; alt=&quot;Stargazers over time&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;致谢&quot;&gt;致谢&lt;/h2&gt;

&lt;p&gt;　　作为一个初学者，刚接触 IntelliJ IDEA 的时候，就有幸阅读了 &lt;a href=&quot;https://github.com/judasn&quot;&gt;@Judas.n&lt;/a&gt; 写的关于 IntelliJ IDEA 的教程，也获益良多。在此感谢 Judas.n 写的教程对我的启发，本教程也对 Judas.n 写的教程多有借鉴，下面附上其 GitHub 地址，欢迎感兴趣的童鞋移步到 Judas.n 的教程观摩学习。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IntelliJ-IDEA-Tutorial: https://github.com/judasn/IntelliJ-IDEA-Tutorial&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;此外，附上一句格言，望共勉：&lt;strong&gt;好学若饥，谦卑若愚。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#索引&quot;&gt;↑↑↑   返回顶部（RETURN THE TOP）  ↑↑↑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

</description>
        <pubDate>Thu, 27 Dec 2018 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/12/27/%E8%BD%AC-%E5%8F%B2%E4%B8%8A%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84-IntelliJ-IDEA-%E6%95%99%E7%A8%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/27/%E8%BD%AC-%E5%8F%B2%E4%B8%8A%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84-IntelliJ-IDEA-%E6%95%99%E7%A8%8B/</guid>
        
        <category>IntelliJ IDEA</category>
        
        <category>配色方案</category>
        
        <category>实用教程</category>
        
        
      </item>
    
      <item>
        <title>利用Nginx部署个人网站</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;之前的文章中已将讲到过用Tomcat作为app代理来部署静态个人网站了，本文尝试用nginx方案再部署一次。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然Tomcat和Nginx是不同的东西（前者是APP层面的服务器代理，后者是http-server协议层面的代理），但是二者均可以用来代理静态网页，而且均比较简单。由于nginx比较流行，本文尝试用nginx实现。&lt;/p&gt;

&lt;h4 id=&quot;1-安装nginx&quot;&gt;1. 安装nginx&lt;/h4&gt;
&lt;p&gt;ubuntu下安装命令如下：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;sudo apt-get install nginx
apt-get update --fix-missing

nginx -v
// nginx version: nginx/1.10.3 (Ubuntu)

nginx
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;根据上面的命令安装后，发现启动会报错，因此参考了一些网络资料。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/shmilychan/article/details/72773270&quot;&gt;一方面参考了这里。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另一方面参考了下面的命令（我是通过这个安装成功的，按照后面的指引将之前的给卸载然后通过下面的命令安装）：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;sudo apt-get install software-properties-common
sudo add-apt-repository ppa:nginx/stable 
sudo apt-get update
sudo apt-get install nginx


安装 sudo apt-get install nginx

启动 sudo /etc/init.d/nginx start

停止 sudo sudo /etc/init.d/nginx stop

root配置 sudo vim /etc/nginx/sites-available/default  

设置文件路径，修改这个字段的值 root /usr/share/nginx/www;

设置日志，修改这个字段 access_log /var/log/nginx.log;

关闭favicon.ico找不到的日志，修改这个：

location = /favicon.ico {
            log_not_found off;
        }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mac下安装命令如下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;//先安装homebrew
/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;

//查询要安装的软件是否存在
brew search nginx   

//查看是否安装以及安装源等信息
brew info nginx

//开始安装，安装完后会显示配置文件、运行文件的安装路径等信息
brew install nginx
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;观察可发现配置文件在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/etc/nginx/nginx.conf&lt;/code&gt;路径。&lt;/p&gt;

&lt;h4 id=&quot;2-安装jekyll和hux-blog-theme&quot;&gt;2. 安装jekyll和Hux Blog Theme&lt;/h4&gt;

&lt;p&gt;安装好jekyll和Hux Blog Theme后，就可以写博文了，然后编译，编译后的静态文件会在_site文件夹下。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://liangfan.tech/2018/12/18/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E4%B8%8A%E7%BA%BF%E4%B9%8B3/&quot;&gt;具体可以参考这里，我以前写的文章。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接着将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt;文件夹上传到服务器。&lt;/p&gt;

&lt;h4 id=&quot;3-修改nginx配置&quot;&gt;3. 修改nginx配置&lt;/h4&gt;
&lt;p&gt;将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt;文件中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;修改为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt;文件夹的路径。&lt;/p&gt;

&lt;p&gt;具体看下面：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;listen       8080;
server_name  localhost;

charset utf-8;

#access_log  logs/host.access.log  main;

location / {
    root   html;
    index  index.html index.htm;
}


// 修改为：


listen       80;
server_name  你的局域网ip或者username;

charset utf-8;

#access_log  logs/host.access.log  main;

location / {
    root   /my-blog/_site;
    index  index.html index.htm;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用nginx命令运行nginx，并打开自己的域名，博客就部署成功了。&lt;/p&gt;

&lt;p&gt;nginx启动停止命令：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;nginx -s reload
nginx -s stop
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/adley_app/article/details/79223221&quot;&gt;删除或者卸载nginx参考这里：&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;ps -A | grep nginx

sudo service nginx stop

sudo apt-get --purge remove nginx
sudo apt-get autoremove
dpkg --get-selections|grep nginx

sudo apt-get --purge remove nginx-common
sudo apt-get --purge remove nginx-core
sudo apt-get --purge remove nginx
dpkg --get-selections|grep nginx
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果运行的过程中莫名其妙报错：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;执行 service nginx start或者restart命令出现错误

service nginx restart
Job for nginx.service failed because the control process exited with error code. See &quot;systemctl status nginx.service&quot; and &quot;journalctl -xe&quot; for details.
莫名奇妙的出现了这个错误，查看logs也没什么发现，之后就停止了nginx的进程，再运行service nginx start，又可以了，具体出错原因现在还不清楚。

查看nginx进程命令

ps -A | grep  nginx

pkill -9 nginx
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

</description>
        <pubDate>Wed, 26 Dec 2018 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/12/26/%E5%88%A9%E7%94%A8Nginx%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/26/%E5%88%A9%E7%94%A8Nginx%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</guid>
        
        <category>jekyll</category>
        
        <category>Nginx</category>
        
        <category>阿里云服务器</category>
        
        <category>个人网站</category>
        
        
      </item>
    
      <item>
        <title>深入理解ClickHouse之3-理解集群的概念</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;从本章开始，我的黑手就慢慢的伸向了大数据所涉及的两个最核心的问题——分布式和并行计算了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大数据计算涉及两个最核心的命题——分布式和并行计算。分布式是为了解决要计算的数据过大算不了的问题，并行计算是要解决计算太慢突破单机性能的问题（当然了这里面也涉及算法问题，后面再表）。当然，即便你再怎么突破，也是无法突破硬件的瓶颈的，所以归根揭底，大数据的核心命题应该是CPU和内存等硬件？&lt;/p&gt;

&lt;h4 id=&quot;1-理解几个核心概念&quot;&gt;1. 理解几个核心概念&lt;/h4&gt;
&lt;p&gt;1）集群&lt;/p&gt;

&lt;p&gt;简单的理解，集群就是把多台计算机（服务器）拼凑在一起，它们相互合作和组合，在物理上构成了一个整体。下面是一个简单的集群示例：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/my-post/20181225a.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一个集群中的单个服务器，一般称为节点（node）。一个节点需与其它所有节点之间保持可连接性，因为任何两个节点之间都会存在通信的可能性（后面会讲原因）。&lt;/p&gt;

&lt;p&gt;这里简要的谈下个人计算机和服务器。如果不详加区分，服务器跟个人计算机没什么两样，都是硬件上面装上软件。但是二者是为不同目的来设计的，个人计算机主要设计方向是长时间处理同一任务，同时界面友好。服务器的主要设计目的是同时间处理多个任务（低频率多线程），比如海量请求，另外对于稳定性和持续性也会要求较高。当然，不同的服务器也有不同的特征，比如说做计算的，那肯定是各方面都必须比较强的。这里不再展开，了解即可。&lt;/p&gt;

&lt;p&gt;2）分布式&lt;/p&gt;

&lt;p&gt;分布式的概念是相对于单个任务而言的，一个大任务或者复杂任务，将其按照一定的逻辑拆分成多个小任务，每个小任务单独处理，然后合并每个小结果成一个大结果。下面是一个简单的分布式架构示例：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/my-post/20181225b.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图，大任务被拆分后，每个小任务单独运行。每个小任务可以执行相同的操作，也可以执行不同的操作。&lt;/p&gt;

&lt;p&gt;如果是每个小任务执行相同的运算操作，并且按照相同的运算合并，那么该系统便成了MapReduce结构，说到这里可能有的小伙伴就比较熟悉了，平时大家用的Apache Hadoop就是这个操作了。MapReduce在后面谈到函数式编程的时候会再讲，因为是一个可以谈很多的、很有意思的话题。&lt;/p&gt;

&lt;p&gt;如果将这里的大任务替换成N多个任务，分配后执行相同的操作，直接得到结果，没有结果合并的过程，那么就成了一个负载均衡的模型。比如海量请求，通过一个中间代理将不同的请求分配到不同的机器上。实现负载均衡，要么在分发的时候确定权重，要么监测每个机器的使用状态并反馈给分发器来进行均衡（这个显然比纯粹依靠分发更科学，但是也更复杂）。负载均衡与分布式的几个显著不同是：&lt;/p&gt;

&lt;p&gt;负载均衡是将多个任务进行平衡分配的机制，分布式是对于单个任务而言的
分布式有结果合并的过程（因为是处理一个任务），负载均衡直接每个结果就是独立可用的（任务各自独立）
另外，分布式一般也是和多服务器系统（可以是集群也可以不是）联系在一起的，因为子任务一般是放在不同的机器上独立运行。分布式是一种系统或者说软件层面的解构过程，而集群是一个物理概念。&lt;/p&gt;

&lt;p&gt;3）并行计算&lt;/p&gt;

&lt;p&gt;并行计算是在单个机器的范畴内针对单个任务而言的。比如对一个List求和，可以将这个List先分成两份，两份中各自再又分成两份，一直到无法继续分下去为止，然后每个部分同时运行。在计算大任务时，并行会比单行快。&lt;/p&gt;

&lt;p&gt;4）分布式集群&lt;/p&gt;

&lt;p&gt;分布式集群兼以上三个特点而有之，能够处理大型任务，而且压榨计算性能。我划重点如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多机器多任务处理&lt;/li&gt;
  &lt;li&gt;每个单任务用分布式处理&lt;/li&gt;
  &lt;li&gt;每个单机器内部实现并行计算&lt;/li&gt;
  &lt;li&gt;分布式的文件系统&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-分布式集群模型&quot;&gt;2. 分布式集群模型&lt;/h4&gt;
&lt;p&gt;下面借助一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3*3分布式集群模型&lt;/code&gt;来厘清一些基本概念和定义：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/my-post/20181225c.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;分片（shard）&lt;/code&gt;：一个分片代表一组机器，分片内部各机器存储相同的数据（分布式文件系统），所有分片中的任一个想加起来等于完整的数据。集群的性能取决于分片的数量。各个分片可以具有不同的权重（比如说有的机器性能好存储空间大，那么可以权重设置高一点）。如上图，共3个分片，其中147属于一个分片，258属于一个分片，369属于一个分片。实际运行中，各分片各取一台机器共3台机器来计算，其它的机器只作为备份之用，并不参与实际计算。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;节点（node）&lt;/code&gt;：一个节点就是一台机器，上图就是一个3x3的有9个节点的分布式集群。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;备份（replica）&lt;/code&gt;：同一个分片内，各个节点互为备份，记住是互为备份，没有主次之分，因为他们是完全一模一样的，相互补位。任何时候，只要不发生故障，他们都是一模一样的，这叫同一性。上图中147互为备份。&lt;/p&gt;

&lt;p&gt;一个大集群中可以有独立的子集群，运行着不同的分布式系统。比如说，可以把hadoop、ClickHouse、Kafka都部署在同一个集群上，实际情况则取决于各自安排和考虑。&lt;/p&gt;

&lt;h4 id=&quot;3-集群的优点及缺陷&quot;&gt;3. 集群的优点及缺陷&lt;/h4&gt;
&lt;p&gt;通过上面的这一番分析，相信对于集群的概念有了较为完整的印象了。分布式集群是为了处理大任务/复杂计算，提高计算性能和稳定性而产生的。&lt;/p&gt;

&lt;p&gt;相对于分布式这个概念，分布式集群提供了分布式的文件/资源系统（将需要访问的资源分布在不同的机器上面）和备份，这样使得兼顾高性能和高可用成为了可能。试想下，如果没有分片之间的通信和分布式文件系统，那么每次都需要在每个机器的全量数据中去寻找和子任务计算相关的资源，效率低下；如果没有分片内部的备份和通信，那么一旦某个机器出现问题，其中一个子任务就直接挂了，这部分数据缺失后后面的合并结果也就失去了准确性。&lt;/p&gt;

&lt;p&gt;综上，分布式集群有以下优点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;高性能（通过组装，扩大了可使用的内存和处理器数量）&lt;/li&gt;
  &lt;li&gt;高可用（备份保障）&lt;/li&gt;
  &lt;li&gt;高可扩展性（机器数量） 另外，一般而言集群还都拥有负载均衡和自动错误恢复个功能。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是，集群也有自己的弱点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;费钱
    &lt;ul&gt;
      &lt;li&gt;计算属性的服务器本身就比较贵，搭建一个集群那就是贵上加贵&lt;/li&gt;
      &lt;li&gt;效率和可用性之间需要兼顾，对于中小公司而言，又想高性能，又想兼顾可用性，但是扩展任何一方面，那都是白花花的银子；像我们公司3台机器部署的集群（3个分片3个备份），可以说是穷人家的集群了，虽然极致压榨了性能和可用性，但是致命的是，可扩展性太差，如果后面添加机器直接能搞的人精神分裂&lt;/li&gt;
      &lt;li&gt;为了提高可用性，有时候甚至需要将不同的备份部署在不同的数据中心，这对集群间的通信和数据传输也是挑战，如果配置专属网络，这又是钱&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;费人
    &lt;ul&gt;
      &lt;li&gt;虽说集群优点多，但是门槛也是有的，需要有专门的人才来维护和保障&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

</description>
        <pubDate>Tue, 25 Dec 2018 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/12/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ClickHouse%E4%B9%8B3-%E7%90%86%E8%A7%A3%E9%9B%86%E7%BE%A4%E7%9A%84%E6%A6%82%E5%BF%B5/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/25/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ClickHouse%E4%B9%8B3-%E7%90%86%E8%A7%A3%E9%9B%86%E7%BE%A4%E7%9A%84%E6%A6%82%E5%BF%B5/</guid>
        
        <category>ClickHouse</category>
        
        <category>OLAP</category>
        
        <category>分布式</category>
        
        <category>集群</category>
        
        
      </item>
    
      <item>
        <title>深入理解ClickHouse之2-部署单机版ClickHouse</title>
        <description>&lt;p&gt;由于ClickHouse是不支持Windows系统的，所以只能安装在Linux或者Mac OSX系统上。如果Windows用户需要尝试的话，需要通过虚拟机或者其它方式安装。本文将一步步带领Linux用户和Mac OSX用户从零开始安装部署单机版ClickHouse。&lt;/p&gt;

&lt;p&gt;根据官网的描述，ClickHouse可以运行在任何Linux系统上，前提是支持SSE 4.2；ClickHouse可以运行在64位Mac OSX上；暂不支持Windows；以下为官网原话：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ClickHouse can run on any Linux, FreeBSD or Mac OS X with x86_64 CPU architecture.Though pre-built binaries are typically compiled to leverage SSE 4.2 instruction set, so unless otherwise stated usage of CPU that supports it becomes an additional system requirement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ubuntu系统安装ClickHouse需如下几步：&lt;/p&gt;

&lt;h4 id=&quot;1-查看当前cpu是否支持sse-42&quot;&gt;1. 查看当前CPU是否支持SSE 4.2&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; sse4_2 /proc/cpuinfo &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SSE 4.2 supported&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SSE 4.2 not supported&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;2-将clickhouse-repo添加到etcaptsourceslist文件&quot;&gt;2. 将ClickHouse repo添加到/etc/apt/sources.list文件&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vi /etc/apt/sources.list
&lt;span class=&quot;nb&quot;&gt;paste &lt;/span&gt;deb http://repo.yandex.ru/clickhouse/deb/stable/ main/ into the file.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;3-下载和安装clickhouse&quot;&gt;3. 下载和安装ClickHouse&lt;/h4&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;clickhouse-client clickhouse-server
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;4-启动和停止clickhouse&quot;&gt;4. 启动和停止ClickHouse&lt;/h4&gt;
&lt;p&gt;1）后台守护模式运行和停止：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service clickhouse-server start
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service clickhouse-server stop
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;关于这里的命令比如start或者stop，自己可以看下文件里面的.sh文件就大概能推断一二了。&lt;/p&gt;

&lt;p&gt;2）Terminal打印日志模式运行：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;clickhouse-server &lt;span class=&quot;nt&quot;&gt;--config-file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/clickhouse-server/config.xml
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个模式下停止直接用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl+C&lt;/code&gt;就行了，与其它软件类似。&lt;/p&gt;

&lt;p&gt;3）运行clickhouse-client：
./clickhouse-client&lt;/p&gt;

&lt;p&gt;server和client一个是服务端，一个是客户端，这个应该是很好理解的，与单机版的 mysql 类似。&lt;/p&gt;

&lt;p&gt;如果觉得每次需要cd到文件目录来启动很麻烦，还可以把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clickhouse-client&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clickhouse-server&lt;/code&gt;添加到系统路径中，这样就比较方便了。&lt;/p&gt;

</description>
        <pubDate>Mon, 24 Dec 2018 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/12/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ClickHouse%E4%B9%8B2-%E9%83%A8%E7%BD%B2%E5%8D%95%E6%9C%BA%E7%89%88ClickHouse/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ClickHouse%E4%B9%8B2-%E9%83%A8%E7%BD%B2%E5%8D%95%E6%9C%BA%E7%89%88ClickHouse/</guid>
        
        <category>ClickHouse</category>
        
        <category>OLAP</category>
        
        
      </item>
    
      <item>
        <title>月薪3千招聘数据分析/挖掘工程师的公司究竟有多恶心人</title>
        <description>&lt;p&gt;我觉得数据分析/数据挖掘工作是这个世界上难度最大的工作之一。但是它的价值和作用都远远被低估了。虽然我已经不做分析师很多年了，但仍然想聊几句公道话。&lt;/p&gt;

&lt;p&gt;一直有个习惯，不管离职在职都会时不时上招聘网站看看。一来了解市场上需要怎么样的人才，自己的能力距离自己想要的职位/薪水还有多远的距离，明确努力的方向；二来了解下市场行情，更精准的定位自己。&lt;/p&gt;

&lt;p&gt;今天写这个文章，纯粹是一个偶然。顺手搜了下，竟然真的有3000块钱一个月的正式岗的工作：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/my-post/20181221a.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3000块钱的数据分析师正式岗……我的个心啊，我不知道别的数据分析师看到后是什么心情，反正我就是愤懑久难平抑。&lt;/p&gt;

&lt;p&gt;可以毫不夸张的说，数据分析/数据挖掘应该是所有技术岗位里面最难的工作，也应该是薪水最高的工作。可惜的是，很多公司没有数仓，没有数据开放平台，所以他们招的数据分析师都是取数师，并不是数据分析师。&lt;/p&gt;

&lt;p&gt;一路从战略分析师、用户体验分析师、数据分析师走过来，真的觉得国内对于分析类工作太轻视了，从给的薪水就能从侧面反映出来。但是我个人觉得，分析/挖掘类工作真的是很有意思，也很重要很有前途。&lt;/p&gt;

&lt;h3 id=&quot;1-数据分析师驱动业务帮助业务&quot;&gt;1. 数据分析师驱动业务、帮助业务&lt;/h3&gt;
&lt;p&gt;业务是任何一家公司的灵魂，数据分析师是最接近公司经营状况的。每天跟核心业务数据打交道，监测公司的经营状况，驱动业务优化。分析师是辅助管理层做重大决策的依据，怎可轻视？&lt;/p&gt;

&lt;h3 id=&quot;2-从行业大势来看数据分析必然越来越被需求&quot;&gt;2. 从行业大势来看，数据分析必然越来越被需求&lt;/h3&gt;
&lt;p&gt;互联网一直以来都是过分关注数据收集、存储和计算，现在大数据也是人人必谈。但是真正有多少公司进行了数据的合理利用，产生了价值？&lt;/p&gt;

&lt;p&gt;现在可以说数据存储和计算能力完全能满足大中小型公司的需求了，未来将是各公司管理层向数据要价值、要应用的二十年，没有挖掘和分析，数据放在那就是废料还占空间。&lt;/p&gt;

&lt;h3 id=&quot;3-数据分析师是承上启下的人&quot;&gt;3. 数据分析师是承上启下的人&lt;/h3&gt;
&lt;p&gt;上承ETL工程师或者数据开发。但是有个很突出的问题，大部分做数据开发的工程师，简直可以说是盲目啊，你们不去主动了解业务就做数据仓库你确定不是搞笑的？你们的商业敏感性呢？数据分析师必须对上下游充分把控，不然自己想做的数据应用就泡汤了。很多做数据开发的可能都没我6，作为经常处理数据并应用的人，其实对于ETL这一套可以说是烂熟于心，对于业务也是心里有杆秤。什么热数据冷数据，平时大家都关心些啥不可能提前没点逼数的。&lt;/p&gt;

&lt;p&gt;下启产品/运营/设计等。得给他们解释怎么做的，为甚么这么做，为什么做不了，有啥技术难点，等等……&lt;/p&gt;

&lt;p&gt;可以这么理解，数据分析师是数据技术和业务的中间桥梁，对上要告诉数据开发业务逻辑，对下要给需求方解释技术限制/手段等等~~~&lt;/p&gt;

&lt;h3 id=&quot;4-数据分析师必须精通各种技术&quot;&gt;4. 数据分析师必须精通各种技术&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;你得会爬虫&lt;/li&gt;
  &lt;li&gt;你得会一些数据架构&lt;/li&gt;
  &lt;li&gt;你得会数据可视化和一些前端知识（可视化框架）&lt;/li&gt;
  &lt;li&gt;你得能跟前端跟客户端说得上话（数据采集、打点等等）&lt;/li&gt;
  &lt;li&gt;你得会NLP&lt;/li&gt;
  &lt;li&gt;你得会机器学习&lt;/li&gt;
  &lt;li&gt;你得会产品、懂点设计和用户体验、懂点运营用户增长啥的&lt;/li&gt;
  &lt;li&gt;你得有沟通技巧&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;话说，把上面的都搞通透真的以为不伤脑子的嘛？又要懂业务又要懂技术，真的以为门槛很低的嘛？不仅要处理分析数据，还得把报告写得漂漂亮亮的让大老爷们看的赏心悦目，真的不需要花心思吗？3000块钱TM的吃饭都不够啊能干啥啊。&lt;/p&gt;

&lt;p&gt;君子爱财，取之有道。廉者不受嗟来之食，居于陋室惟吾德馨。&lt;/p&gt;

&lt;p&gt;即使哪天露宿街头，也要有珍视自己的勇气。没有自重，何来自尊。&lt;/p&gt;

&lt;p&gt;资本家作践自己，所以你自己就真的把自己当廉价劳动力给卖了，你的心不痛吗？&lt;/p&gt;

&lt;p&gt;还有那些花3千块钱一个月就想招数据分析师的公司，你们在恶心谁呢？每一个稍微有点责任心的同行，都应该站出来高声疾呼，拒绝和抨击这种垃圾企业的人才观。只有我们好了，这个行业才会好，只有行业好了，我们才会好。&lt;/p&gt;

&lt;p&gt;我们必须认识到一个问题，低薪必然让行业变得越来越low b，各种鱼龙混杂的人群。而鱼龙混杂又会进一步毁坏行业口碑。如果真爱这一行业，应该是痛心疾首的。我们要严格要求自己，努力让自己变得优秀，也要对那些玷污我们职业自豪感的公司say no.&lt;/p&gt;

&lt;p style=&quot;color: red;font-weight: bold;&quot;&gt;一个3000块钱月薪的职业，你觉得你会干得很自豪觉得自己很有价值吗？&lt;/p&gt;

</description>
        <pubDate>Fri, 21 Dec 2018 19:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/12/21/%E6%9C%88%E8%96%AA3%E5%8D%83%E6%8B%9B%E8%81%98%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E6%8C%96%E6%8E%98%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%85%AC%E5%8F%B8%E7%A9%B6%E7%AB%9F%E6%9C%89%E5%A4%9A%E6%81%B6%E5%BF%83%E4%BA%BA/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/21/%E6%9C%88%E8%96%AA3%E5%8D%83%E6%8B%9B%E8%81%98%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E6%8C%96%E6%8E%98%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E5%85%AC%E5%8F%B8%E7%A9%B6%E7%AB%9F%E6%9C%89%E5%A4%9A%E6%81%B6%E5%BF%83%E4%BA%BA/</guid>
        
        <category>数据分析</category>
        
        <category>职业自豪感</category>
        
        
      </item>
    
      <item>
        <title>深入理解ClickHouse之1 - 初识ClickHouse</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;谈起ClickHouse，应该很多人都会很陌生。一来它是一个新生事物，听过的使用过的人非常少；二来可能没有hadoop生态那么完善和健壮，所以稳定性和功能还有所欠缺。但这些都不影响其迅速获得的良好的口碑和开挂的性能，作为特定领域的数据库，极其看好ClickHouse。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1-什么是clickhouse&quot;&gt;1. 什么是ClickHouse？&lt;/h3&gt;
&lt;p&gt;这里引用官网的一段话：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ClickHouse is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面这段话我划重点如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ClickHouse是一个数据库管理系统&lt;/li&gt;
  &lt;li&gt;它是列式的&lt;/li&gt;
  &lt;li&gt;它为联机处理分析而生&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;什么是DBMS呢？就是说它是一个成体系的东西，对于数据的读写、存储、查询、修改、复制、事务、效率等等方方面面都有自己的架构方法论，换句话来说，它是庞大的，完善的。说到DBMS，联想到MYSQL就对了。但是，但是，相对于hadoop的笨重，ClickHouse可以说是一个小清新了。&lt;/p&gt;

&lt;p&gt;什么是column-oriented呢？column-oriented是相对于row-oriented来讲的。典型的行式数据库，比如mysql。相对于行式数据库，列式数据库是一列数据存储为一个小单元，需要用多少列就读取多少列的数据，那么减少了IO的数据量，自然提升了效率。&lt;/p&gt;

&lt;p&gt;什么是OLAP呢？联机分析处理是相对于联机事务处理而言的。联机事务处理面向的是数据修订、状态改变，比如业务数据的查询、订正、变更、写入等等。联机分析处理面向的是数据分析/挖掘，需要提供多维度、灵活的、高效的检索和查阅服务，一个比较典型的应用是BI平台。&lt;/p&gt;

&lt;p&gt;ClickHouse是俄罗斯的百度——yandex公司开发的。yandex公司在处理自己公司日常数据业务中，开发了一套数据管理系统，随后进行了开源分享。因为脱胎于实践，来源于业务+技术沉淀，因此在使用过程中会有非常多暖心的、别的数据库不具备的特点（后面会一步步介绍）。另外，搞数据效率是永恒的命题，数学和计算机这两个东西缺一不可，恰恰俄罗斯就是盛产数学家的地方，而且之前看过一个由github统计的数据显示，俄罗斯的程序员在算法方面的活跃度排名世界第一，我们有理由相信ClickHouse前途光明。&lt;/p&gt;

&lt;h3 id=&quot;2-clickhouse有哪些优点特点&quot;&gt;2. ClickHouse有哪些优点/特点？&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;变态快
    &lt;ul&gt;
      &lt;li&gt;列式存储+数据压缩带来的效率&lt;/li&gt;
      &lt;li&gt;单服务器每秒能处理亿级到十亿行级别数据&lt;/li&gt;
      &lt;li&gt;进行简单查询时峰值处理性能可达到单服务器每秒2TB&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;线性可扩展
    &lt;ul&gt;
      &lt;li&gt;不需要对数据库进行更改直接扩容服务器（懒人福利）&lt;/li&gt;
      &lt;li&gt;横向和纵向均有良好的可扩展性
        &lt;ul&gt;
          &lt;li&gt;横向上讲，既可以部署在小小的虚拟机上，也可以部署在有成百上千个节点（机器）的集群上&lt;/li&gt;
          &lt;li&gt;纵向上讲，单个节点可容纳万亿行数据或超过100TB数据&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;高效的硬件利用（从硬件层面进行了优化）
    &lt;ul&gt;
      &lt;li&gt;在数据吞吐量相同的情况下，ClickHouse在处理一般性分析类查询时比传统行式数据库快2-3个数量级；列式存储方式使其可以装载更多热数据（什么是热数据？）在内存中，因而响应时间更短&lt;/li&gt;
      &lt;li&gt;ClickHouse最小化了范围查询（语句）所要查找的次数（可以理解为一种查询优化），这提升了旋转式磁盘驱动的使用效率，维护了持久化存储的数据的位置引用（翻译成人话就是说，范围数据是存储在磁盘的不同位置的，你要执行范围查找查询那你肯定要旋转磁盘指针去到不同的磁盘位置索引数据，如果我优化了查找方式，那么你的旋转式磁盘驱动是不是就可以使用得更少了，对于存储有很多本地数据的磁盘来讲，数据引用效率是不是就更高了）&lt;/li&gt;
      &lt;li&gt;ClickHouse是在CPU层面高效的，因为它的向量化查询执行方式夹杂了与之相关的处理器指令和运行时代码产生（翻译成人话就是ClickHouse在CPU层面进行了优化，特别是intel的CPU，因此二者配合得是相当的默契）&lt;/li&gt;
      &lt;li&gt;针对大多数的查询语句或SQL语法模式，ClickHouse对数据传输量进行了最小化优化（不必要的数据传输统统省了）。这使得使用方在管理数据和制作数据报告的时候，不必刻意配置旨在高效数据计算的专属网络&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;容错性
    &lt;ul&gt;
      &lt;li&gt;ClickHouse支持多主线异步复制并且能部署在多个数据中心上&lt;/li&gt;
      &lt;li&gt;单节点或者整个数据中心宕机不会影响系统读写的可靠性&lt;/li&gt;
      &lt;li&gt;分布式读取模式，自动（将吞吐压力）均衡于各可用的备份节点上从而避免高时延&lt;/li&gt;
      &lt;li&gt;宕机恢复后备份间数据自动同步或半自动同步&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;丰富的特征
    &lt;ul&gt;
      &lt;li&gt;对用户友好的SQL查询句法，丰富的内置分析统计函数/组件，比如基数、百分位数计算；日期、时间、时区数据函数；URL和IP地址处理函数&lt;/li&gt;
      &lt;li&gt;数据组织和存储格式丰富，比如存储复杂数据的arrays, array joins, tuples and nested data structures，这些数据结构都做了读写和计算优化，因此用来处理和查询非结构化数据（也可以叫半结构化）也是非常高效率的&lt;/li&gt;
      &lt;li&gt;支持本地join和分布式join，支持额外定义的字典、从外部导入的维度表，通过简单的语法句子就能无缝join数据&lt;/li&gt;
      &lt;li&gt;支持近似查询处理，提高获得结果的速度，特别是在处理TB/PB级别数据的时候（比如抽样部分数据计算一个结果然后推广到总体）&lt;/li&gt;
      &lt;li&gt;支持按条件汇总函数，可以用非常简单的句法查询极值和汇总数据查询&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;高可靠性（高可用）
    &lt;ul&gt;
      &lt;li&gt;软件或硬件配置失误不会导致数据丢失&lt;/li&gt;
      &lt;li&gt;所有数据在读写时均会做校验和（checksummed）检验&lt;/li&gt;
      &lt;li&gt;对于查询语句的复杂度和资源使用限制控制比较灵活&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使用简单易上手
    &lt;ul&gt;
      &lt;li&gt;流水线式的数据处理流程，数据一旦进入系统，那么立即处于可以使用的状态，边读（查询）边写没有任何压力&lt;/li&gt;
      &lt;li&gt;任何时候随时可以给表添加字段、属性、维度，不会拖慢或影响集群运行速度&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;开箱即用（works out-of-the-box）&lt;/code&gt;, 没有任何开发背景的人都可以安装和部署ClickHouse集群&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-clickhouse有什么缺点呢&quot;&gt;3. ClickHouse有什么缺点呢？&lt;/h3&gt;
&lt;p&gt;喷子喷的比较多的一般无非两点。&lt;/p&gt;

&lt;p&gt;一是ClickHouse没法进行事务操作。首先，ClickHouse是可以进行事务操作的，只不过没有像mysql那种批量删除更改的那种操作。其次喷子应该搞清楚什么是OLAP再喷，一个面向查询和应用的数据你还想着批量更改删除可见你的业务能力有多糟糕。（回去先了解下ETL再来喷？）永远记住，用途不同！！！！喷也要专业！！！！&lt;/p&gt;

&lt;p&gt;二是ClickHouse为啥不使用MapReduce那一套。MapReduce以可靠性著称，但是过分强调容错和中间数据的读写，导致其时延非常非常高，不适合作为web前端的后端。你愿意查个数据等半天吗？ClickHouse的精髓是最大限度榨干CPU和内存，在内存里面计算，所想即所得，快得冒泡。&lt;/p&gt;

&lt;p&gt;我可以说ClickHouse没有缺点吗？&lt;/p&gt;

&lt;h3 id=&quot;4-哪些场景比较适合使用clickhouse呢&quot;&gt;4. 哪些场景比较适合使用ClickHouse呢？&lt;/h3&gt;
&lt;p&gt;ClickHouse比较适合分析结构化的、干净的、不可变的流式数据，比如打点日志分析啦，行为分析啦。强烈建议将源源不断的流式数据和提前已经定义好的维度表组合起来，并塞到一个基于事实的大宽表中去（ a single wide fact table，一张宽大的事实表，是不是很有亲切感？）。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ClickHouse比较适用于以下行业/场景：
    &lt;ul&gt;
      &lt;li&gt;网页端和客户端产品的数据分析&lt;/li&gt;
      &lt;li&gt;广告系统和实时竞价广告&lt;/li&gt;
      &lt;li&gt;电信行业&lt;/li&gt;
      &lt;li&gt;电商和金融行业&lt;/li&gt;
      &lt;li&gt;信息安全&lt;/li&gt;
      &lt;li&gt;实时监控和遥感测量&lt;/li&gt;
      &lt;li&gt;时间序列&lt;/li&gt;
      &lt;li&gt;商业智能&lt;/li&gt;
      &lt;li&gt;在线游戏&lt;/li&gt;
      &lt;li&gt;所有的互联网场景&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ClickHouse不适合的场景：
    &lt;ul&gt;
      &lt;li&gt;联机事物处理（上面提到过的，小黑板敲起来，mysql这种比较适合）&lt;/li&gt;
      &lt;li&gt;键值对数据高效率访问请求（想到redis了嘛？）&lt;/li&gt;
      &lt;li&gt;二进制数据或文件存储（想到mongDB了嘛？）
  -过度标准化的数据（有很多人好奇了，开什么玩笑，数据按说应该是越标准化越好啊？这个问题应该这样理解，那些过于简单直接、没啥维度和灵活度需求的数据，咋能体现ClickHouse的优势呢，你用啥数据库都能做得很6啊）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 20 Dec 2018 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/12/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ClickHouse%E4%B9%8B1-%E5%88%9D%E8%AF%86ClickHouse/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ClickHouse%E4%B9%8B1-%E5%88%9D%E8%AF%86ClickHouse/</guid>
        
        <category>ClickHouse</category>
        
        <category>OLAP</category>
        
        
      </item>
    
      <item>
        <title>利用Github Pages部署个人博客网站</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;前面已经讲过了利用Tomcat和阿里云ESC服务器来搭建个人博客网站，这个技术方案的主要优点是访问速度快，而且不用托管代码(私密性)。现在介绍另外一种部署方案——利用Github Pages。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;利用Github Pages来部署个人网站的优点是代码在线上，随时可以操作，而且不用申请国内的服务器和域名，所以流程就相对简单一些，今天部署今天就能看见自己的网站并访问。&lt;/p&gt;

&lt;p&gt;缺点嘛，一来访问速度可能会很慢特别是需要加载图片的时候，然后也会有被wall的风险，毕竟github是国外网站；二来域名会比较长不那么个性；三来需要学会操作git…当然，一和二可以通过购买域名并进行cname域名绑定和网络加速来优化，三的话本身也不是一个难题。&lt;/p&gt;

&lt;p&gt;下面看一下简要的部署流程。&lt;/p&gt;

&lt;h3 id=&quot;1注册一个github账号&quot;&gt;1.注册一个github账号&lt;/h3&gt;
&lt;p&gt;这个没啥需要讲的了，就自己百度搜下github，进入官网按照流程注册一个自己的账号。&lt;/p&gt;

&lt;h3 id=&quot;2了解并熟悉操作git&quot;&gt;2.了解并熟悉操作git&lt;/h3&gt;
&lt;p&gt;如果是首次接触可能有点难以理解，但是git说白了就是：远程线上的代码（远程仓），本地也有代码（本地仓），怎么进行本地和远程的同步以及版本管理等等。git遵循success or nothing的事务性操作命令（是不是想到了数据库，orz……），来保证ACID——原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）原则。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_38716242/article/details/79380825&quot;&gt;关于git的环境配置和操作，可以看这里。&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;3简单了解下github-pages&quot;&gt;3.简单了解下Github Pages&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;官网入口在这里。&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;4在github上建立一个namegithubio的repo&quot;&gt;4.在github上建立一个name.github.io的repo&lt;/h3&gt;

&lt;p&gt;例如（由于我已经建立过，所以会有红色警示）：
&lt;img src=&quot;/img/my-post/20181219a.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5将博客代码推到namegithubio这个repo&quot;&gt;5.将博客代码推到name.github.io这个repo&lt;/h3&gt;
&lt;p&gt;这里需要注意的是，代码都是公开的，github非付费账号的repo代码都是公开的，如果有隐私信息请注意慎重。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先，将&lt;a href=&quot;https://github.com/huxpro/huxpro.github.io/&quot;&gt;Hux Blog Theme&lt;/a&gt;的代码clone到本地。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;然后，将本地代码初始化后push到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name.github.io&lt;/code&gt;这个repo。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;little tips:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;1）新建Text文件夹作为仓库根目录（文件夹名字随意命名）

2）将需要上传的代码文件加入到Text根目录

3）在根目录下建立仓库
使用命令行或Git Bash，输入下面命令：先进入到Text根目录下，再输入git init（初始化一个仓库）


add和commit其实相当于本地操作了~~
4）将所有文件添加到仓库
使用命令行或Git Bash，输入下面命令：git add .

5）提交
使用命令行或Git Bash，输入下面命令：git commit -m “CommitInfo”

6）添加源到GitHub
git remote add origin git@github.com:YourName/YourRepositroy.git

7）上传源到GitHub
git push -u origin master
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;接下来在浏览器中打开&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name.github.io&lt;/code&gt;就能看到自己的博客内容了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;后续更新博客内容可以直接在github中修改代码，或者在本地修改后和远程仓同步&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;6实现keynote翻页效果&quot;&gt;6.实现keynote翻页效果&lt;/h3&gt;

&lt;p&gt;1）参考Hux在其github中的描述，了解网页实现keynote布局的情况&lt;/p&gt;

&lt;p&gt;2）将Hux在github上的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js-module-7day&lt;/code&gt;项目clone到本地&lt;/p&gt;

&lt;p&gt;3）在自己的gith上面建一个repo，由于这里先是自己测试，可以也叫js-module-7day&lt;/p&gt;

&lt;p&gt;4）将本地代码推到自己的github repo下，命令如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push origin master:gh-pages&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;5）在博客的markdown文件中引用这个keynote repo的地址即可查看内容&lt;/p&gt;

&lt;p&gt;6）通过keynote repo的代码来修改keynote内容&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://huangxuan.me/js-module-7day/#/&quot;&gt;实现效果可参考这里&lt;/a&gt;， 还是很美观的。&lt;/p&gt;

</description>
        <pubDate>Thu, 20 Dec 2018 19:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/12/20/%E5%88%A9%E7%94%A8Github-Pages%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99markdown/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/20/%E5%88%A9%E7%94%A8Github-Pages%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99markdown/</guid>
        
        <category>jekyll</category>
        
        <category>Github Pages</category>
        
        <category>个人网站</category>
        
        
      </item>
    
      <item>
        <title>从零开始部署个人网站上线之4</title>
        <description>&lt;!-- 
&gt; 本文旨在从零开始手把手教你部署个人博客网站，即使你没有任何技术背景。因为是部署博客网站，那么目的是方便自己写博文，技术实现手段上越简单越好，尽可能的使用现成的技术框架。这里使用的是`jekyll + Hux Blog Theme + Tomcat + 阿里云ESC服务器`来部署，接下来会引导你一步一步从零开始，直到能打开自己的网站为止。


&lt;!-- 基本的部署流程可以概括为：

![Alt text](/img/my-post/20181210a.png) --&gt;

&lt;!-- 
### 1. 购买阿里云ESC服务器

这个比较简单，就是百度搜阿里云然后打开官网首页，产品-云服务ESC点击进去，然后注册登录。

由于是个人网站，访问量和并发非常小，也不需要用到数据库，买个1核心1GB内存1M带宽的就是了，当然如果金钱充裕，那么买个带宽大点的也不是不行。

服务器的地址选国内比较好，因为毕竟大部分访问的用户都是在国内的。

服务器操作系统选择ubuntu16.04或以上，切记服务器选择linux ubuntu，别问为什么，反正就是windows服务器被嫌弃。像superset和ClickHouse压根就不支持windows，只能用在mac和linux上（二者都是基于unix）。

另外，阿里云的服务器首次购买是可以享受N天无理由退款的，具体多少天可以搜一搜，如果想退货再重新购买需要趁早。遇到双11双12，服务器的价格折扣很大，还是挺实惠的。学生凭学生证购买也可以享受折扣。

到这里的话第1步就OK了。操作系统的基本环境配置，等做完了第3步再回来弄。为什么呢？往下面看就知道了。



### 2. 购买域名

在阿里云官网顶部搜索栏中搜索`域名购买`，然后进入域名购买页面，搜索自己喜欢的域名，各种域名因有尽有：`.com`, `.cn`, `.org`, `.me`, `.info`等等，琳琅满目，像我就是买的`liangfan.tech`。

一般而言， `.com`的域名会比其他的贵一些。这个可以自己根据经济情况和喜好拿捏。

域名的话建议3年起买，我是购买的3年。因为域名到期后再续费，价格是肯定比初次购买要贵的，所以如果经济条件允许，最好是多买几年。

另外，建议服务器和域名都在阿里云购买，一来阿里云服务稳定，价格还算公道；二来后面备案等也较为方便。



### 3. 域名备案

这应该是所有步骤里面最耗时的一步了，所以先把这一步给处理了，其实中间是有很多时间是把弄其它的东西的。

啥是域名备案呢？其实就是到z+f那里去注册下、实名下。具体原因嘛，你懂的， 大天朝，毕竟没有west world那么free。工信部规定，没有备案的域名，是打不开网站的，而且还会受到法律的制裁。

当然你也可以申请国外的服务器，然后将博客部署在国外网站上面，是不用备案的，但是访问速度就不敢保证了，而且会不会被wall也难说。

域名备案，在阿里云首页搜索`域名备案`进入相应页面即可开始操作了。

域名备案需要用到身份证信息、前面申请的服务器的公网IP、填写备案材料、申请幕布并拍照邮寄材料等等一系列流程，总之比较繁杂，这部分需要在阿里云的指引下一步步完成。

从申请备案到通过大概需要3-4周的时间。这段时间可以跳过第4步，进行5-10的步骤，先在本地部署和演练。



### 4. 域名解析

所谓域名解析，就是说将你的文字域名（如`liangfan.tech`）映射到数据域名（如117.41.12.13）上。

登录阿里云官网后，进入控制台-域名点击进入就可以看见自己名下的域名列表，点击解析域名后添加记录。

这里添加两个解析记录即可，两个记录的的`记录类型`均是A，主机记录一个是`www`一个是`@`，解析线路都选择`默认`，记录值均是自己的公网IP，TTL10分钟。

这两个解析记录的含义是说，将域名`xxxx.xx`和`www.xxxx.xx`均解析到公网IP上，这样在浏览器输入网址的时候加wwww或者不加均可访问网站。

由于阿里云ESC弹性服务器已经对网络访问进行了优化，因此是不需要进行`cname`解析的，不要被网上的杂论带歪了。

这个时候域名相关的工作基本就完结了。可以在本地的电脑的`Terminal`中分别`ping`一下公网数字IP和自己的文字域名看下通不通，如果不停出现类似`64 bytes from xx.xx.xxx.xxx: icmp_seq=0 ttl=52 time=7.879 ms`的内容，那么说明域名解析成功，可以进行下一步了。 --&gt;

&lt;!-- 
### 5. 在本地电脑和服务器间传输数据/文件

&amp;nbsp;

&gt; 关于在服务器和本地之间传输数据或文件，网上资料很多，比如借助第三方软件等。这里介绍的方法不使用软件，而是直接使用`ssh`来实现连接和传输。
如果需要将文件传输到指定文件夹下，可以先用命令`ssh root@your_public_ip_address`并输入密码来远程登录服务器，并使用`mkdir dirB`来创建目标文件夹。



##### 5.1 使用`scp`来传输单个文件（本地上传到服务器）

- 语法为`scp fileA dirB`也就是`scp 来源地 目的地`的模式，将文件传输至服务器目录下，例如：`scp /Volumes/your_local_file.txt root@your_public_ip_address:/var/mydata/`



##### 5.2 使用`rsync -P --rsh=ssh` 上传文件且支持断点续传，`ctrl+z`暂停，`bg`恢复

- 例如：`rsync -P --rsh=ssh /Volumes/data/bank_train.csv root@your_public_ip_address:/var/mydata/`



##### 5.3 使用`scp -r`来传输文件夹（本地上传到服务器）

- 语法为`scp -r dirA dirB`，将文件夹传输至服务器目录下，例如：`scp -r /Volumes/your_local_dir root@your_public_ip_address:/var/mydata/`



##### 5.4 使用`rsync -a`来同步文件夹

- 例如：`rsync -a /Users/Documents/my-blog/_site/  root@your_public_ip_address:/tomcat/webapps/ROOT`，此种方法不会传输文件夹下所有的文件，而是会去比对两个文件夹下的文件异同，只会将前者下面有的文件而后者没有的进行同步，如果是那种需要经常更新的文件夹，使用此种方法的话传输的数据量会大大减小（不必要每次都全文件夹传输）。

- 另外注意`_site`后面的`/`号，如果有说明是同步目录底下的各个文件过去（目标文件夹文件结构会成为`/ROOT/*files`），如果没有那么会直接传输整体文件夹（目标文件夹文件结构会成为`/ROOT/_site/*files`）



##### 5.5 使用`rm`命令来删除文件/文件夹

- 使用`rm file`来删除单个文件，使用`rm -r dir`来删除整个文件夹，使用`rm -rf dir`来无视任何条件的直接删除文件夹（不会有反馈和警告，直接删除）




具体是从服务器传输到本地，还是从本地传输到服务器，自己调整来源地和目的地的顺序即可。

&gt; 待续~~~

&amp;nbsp;
&amp;nbsp;
 --&gt;
&lt;!-- 

### 6. 配置jdk

首先需要安装的是oracle版本的jdk（`Java Development Kit`），不是jre（jre是java程序的运行环境，不是编译和开发环境），也不是open jdk。

配置jdk需执行如下几步操作：

1）从[oracle官网下载jdk8](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)，注意下载对应的版本（操作系统、32位/64位）；以ubuntu64位为例，下载linux x64以`tar.gz`为结尾的文件即可

2）将文件上传至远程服务器预先建立好的文件夹并解压
```
# 服务器端
mkdir /java

# 本地
scp /Users/liang/Downloads/jdk-8u191-linux-x64.tar.gz root@your_public_ip:/java

# 解压文件
cd /java
tar -zxvf jdk-8u191-linux-x64.tar.gz
ls -l /java/jdk1.8.0_191
```

3）设置java_home环境&lt;br&gt;
先打开配置文件，`sudo vi /etc/profile` &lt;br&gt;
然后将下面的代码复制进profile文件
```
#set Java environment
export JAVA_HOME=/java/jdk1.8.0_191
export JRE_HOME=$JAVA_HOME/jre
export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH
export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH
```
`vi文件编辑tips: 按i键进入编辑模式 -&gt; 上下位移到空白位置 -&gt; paste粘贴内容 -&gt; esc退出编辑 -&gt; :wq保存退出`


4）使环境配置生效，并查看配置结果
```
source /etc/profile
java -version
```
 

&amp;nbsp;
&amp;nbsp;

### 7. 在本地配置jekyll

&gt; jekyll是一个静态网页生成工具，可以理解为对网页代码/资源进行有效组织和编译。所谓静态，就是说没有数据交互，页面状态和内容是写死的。

jekyll配置在服务端或者本地都是ok的，但是由于我们采取的方式是先将博客文件在本地编辑、编译，测试、浏览、修改确认没问题后再上传到服务器端，所以在本地配置jekyll就ok了。下面简单介绍下mac或者ubuntu如何配置jekyll，更详细的配置步骤可以去[jekyll官网](https://jekyllrb.com/)自行查看。

ubuntu配置jekyll有如下几个步骤：

1）安装ruby及配置环境
```
sudo apt-get install ruby-full build-essential zlib1g-dev

echo '# Install Ruby Gems to ~/gems' &gt;&gt; ~/.bashrc
echo 'export GEM_HOME=&quot;$HOME/gems&quot;' &gt;&gt; ~/.bashrc
echo 'export PATH=&quot;$HOME/gems/bin:$PATH&quot;' &gt;&gt; ~/.bashrc
source ~/.bashrc
```

2）安装jekyll和paginate
```
gem install jekyll bundler 
gem install jekyll-paginate
```

3）测试是否安装成功
```
jekyll -version
```

&amp;nbsp;
&amp;nbsp;

### 8. 使用Hux Blog Theme

&gt; 上面已经安装了静态博客生成工具，那么接下来就是要配置博客内容工具或者主题了。所谓主题，一是方便博客的书写和格式化内容，二是使博客看起来美观。

这里使用的是一个阿里前端小哥的开源博客主题，叫 [Hux Blog Theme](https://github.com/huxpro/huxpro.github.io/)，它是在jekyll的基础上开发的一个很美观的博客主题。直接下载下来并配合之前安装的jekyll即可在本地使用了。

将Hux的github源码下载到本地某个文件夹下，然后执行如下代码：
```
cd /huxblog-boilerplate
jekyll serve
```
如果出现类似以下内容，那么大功告成：
```
Configuration file: /Volumes/SCALA/html/my-blog/_config.yml
            Source: /Volumes/SCALA/html/my-blog
       Destination: /Volumes/SCALA/html/my-blog/_site
 Incremental build: disabled. Enable with --incremental
      Generating... 
                    done in 1.157 seconds.
 Auto-regeneration: enabled for '/Volumes/SCALA/html/my-blog'
    Server address: http://127.0.0.1:4000/
  Server running... press ctrl-c to stop.
```

此时，在浏览器中输入`http://127.0.0.1:4000/`是可以看见渲染后的博客内容的。

关于`Hux Blog Theme`注意如下几个问题：
- `_config.yml`是配置文件
- 博文编辑`_posts`文件夹下的`markdown`文件即可，文件命名格式为`yyyy-mm-dd-fileName.markdown`文件名及路径会显示在浏览器的URL中；博文标题和格式是由markdown文件的顶部内容控制的；博文顶部背景图片以深色系为佳（因为标题字是白色的）
- 编译后的内容存放在`_site`文件夹下，这个后面需要用到
- 后续博文编辑修改均可先在本地查看确认后再上传至服务器端
- `jekyll serve`开启服务，`jekyll build`编译（其实开启服务的过程也是包含编译的，只需要编译可以使用jekyll build）

&amp;nbsp;
&gt; 待续~~~ --&gt;

&lt;!-- &lt;ul type=&quot;circle&quot;&gt;
	&lt;li&gt;_config.yml是配置文件&lt;/li&gt;
&lt;/ul&gt; --&gt;

&lt;!-- &amp;nbsp;
&amp;nbsp; --&gt;

&lt;h3 id=&quot;9-配置tomcat&quot;&gt;9. 配置Tomcat&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Apache Tomcat是一个轻量级的web应用服务器代理， 在中小型系统和并发访问用户不是很多的场合下被普遍使用。一般来说Apache家族的开源软件都是又笨重又复杂的，但是稳定性和功能都比较健壮。关于Tomcat的详细特点和应用细节，可以去官网了解。这里我们只需要用到它很小的一部分功能，所以即使不了解也不必胆怯。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在服务器端配置Tomcat有如下几个步骤：&lt;/p&gt;

&lt;p&gt;1）&lt;a href=&quot;https://tomcat.apache.org/download-90.cgi&quot;&gt;下载Tomcat 9 Core&lt;/a&gt;并上传至服务器端&lt;/p&gt;

&lt;p&gt;2）解压文件&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar -zxvf apache-tomcat-9.0.13.tar.gz ./location_you_want&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3）后台守护方式启动Tomcat&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;cd /Users/Downloads/apache-tomcat-9.0.13/bin
ls -l
./startup.sh
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时Tomcat应该就已经在后台运行了，如果看见类似如下代码那么说明成功：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Using CATALINA_BASE:   /Users/liang/Downloads/apache-tomcat-9.0.13
Using CATALINA_HOME:   /Users/liang/Downloads/apache-tomcat-9.0.13
Using CATALINA_TMPDIR: /Users/liang/Downloads/apache-tomcat-9.0.13/temp
Using JRE_HOME:        /Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home
Using CLASSPATH:       /Users/liang/Downloads/apache-tomcat-9.0.13/bin/bootstrap.jar:/Users/liang/Downloads/apache-tomcat-9.0.13/bin/tomcat-juli.jar
Tomcat started.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;此时在浏览器中打开&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://127.0.0.1:8080/&lt;/code&gt;，就能刚看见官方自带的web app例子了。
关闭服务的话使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./shutdown.sh&lt;/code&gt;命令即可。运行日志存放在logs文件夹中。&lt;/p&gt;

&lt;p&gt;4）修改Tomcat服务请求端口&lt;br /&gt;
打开conf文件夹下的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.xml&lt;/code&gt;文件，找到如下这段代码：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    &amp;lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;
               connectionTimeout=&quot;20000&quot;
               redirectPort=&quot;8443&quot; /&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将port从8080修改为80.这样的话在浏览器中输入网址不再需要带上端口了，输入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://127.0.0.1/&lt;/code&gt;也可访问了。&lt;/p&gt;

&lt;p&gt;更详细的Apache Tomcat 9功能，请参考&lt;a href=&quot;http://tomcat.apache.org/tomcat-9.0-doc/index.html&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt; 
 &lt;/p&gt;

&lt;h3 id=&quot;10-将编译后的博客文件同步至服务器端&quot;&gt;10. 将编译后的博客文件同步至服务器端&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;现在，所有的前期配置工作都已经完成了。接下来只需要将博客内容提供给Tomcat，由Tomcat代理服务请求及响应即可了。 根据jekyll官方的提示，只需要将博客编译后的内容拷贝到服务器的ROOT目录下即可。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;jekyll官方在以下文字中作了一些提点，我也是一点点摸索才恍然大悟：
&lt;img src=&quot;/img/my-post/20181218.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来按照如下步骤给Tomcat服务器提供内容：&lt;/p&gt;

&lt;p&gt;1）清空Tomcat官方自带的web app例子文件&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;cd /apache-tomcat-9.0.13/webapps/ROOT
sudo rm -rf ./
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2）本地编辑博客内容并编译&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;cd /my-blog
jekyll build
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3）将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt;文件夹下的内容上传到服务器中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/apache-tomcat-9.0.13/webapps/ROOT&lt;/code&gt;文件夹下&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;rsync -a /my-blog/_site/  root@your_public_ip:/apache-tomcat-9.0.13/webapps/ROOT
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4）启动Tomcat服务并访问网址&lt;/p&gt;

&lt;p&gt;不出意外的话，用浏览器访问公网IP和域名均是可以正常浏览博客内容的。
以后每次更新博客内容，重复第2-3步并刷新网页即可，不需要重启Tomcat服务。&lt;/p&gt;

&lt;p&gt; 
 &lt;/p&gt;

&lt;h3 id=&quot;11-注意阿里云的端口访问限制&quot;&gt;11. 注意阿里云的端口访问限制&lt;/h3&gt;

&lt;p&gt;默认情况下，阿里云服务器是没有开放任何端口访问权限的。因此如果网站打不开，需要看下是否是因为端口访问权限的问题。&lt;/p&gt;

&lt;p&gt;具体配置入口是：控制台 -&amp;gt; 云服务器ESC -&amp;gt; 网络和安全 -&amp;gt; 安全组 -&amp;gt; 配置规则&lt;/p&gt;

&lt;p&gt;开放入口方向中的tcp 80端口即可。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enjoy your personal website and keep writing！&lt;/code&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;完结~~~&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; 
 &lt;/p&gt;

</description>
        <pubDate>Wed, 19 Dec 2018 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/12/19/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E4%B8%8A%E7%BA%BF%E4%B9%8B4/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/19/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E4%B8%8A%E7%BA%BF%E4%B9%8B4/</guid>
        
        <category>jekyll</category>
        
        <category>Tomcat</category>
        
        <category>阿里云服务器</category>
        
        <category>个人网站</category>
        
        
      </item>
    
      <item>
        <title>从零开始部署个人网站上线之3</title>
        <description>&lt;!-- 
&gt; 本文旨在从零开始手把手教你部署个人博客网站，即使你没有任何技术背景。因为是部署博客网站，那么目的是方便自己写博文，技术实现手段上越简单越好，尽可能的使用现成的技术框架。这里使用的是`jekyll + Hux Blog Theme + Tomcat + 阿里云ESC服务器`来部署，接下来会引导你一步一步从零开始，直到能打开自己的网站为止。


&lt;!-- 基本的部署流程可以概括为：

![Alt text](/img/my-post/20181210a.png) --&gt;

&lt;!-- 
### 1. 购买阿里云ESC服务器

这个比较简单，就是百度搜阿里云然后打开官网首页，产品-云服务ESC点击进去，然后注册登录。

由于是个人网站，访问量和并发非常小，也不需要用到数据库，买个1核心1GB内存1M带宽的就是了，当然如果金钱充裕，那么买个带宽大点的也不是不行。

服务器的地址选国内比较好，因为毕竟大部分访问的用户都是在国内的。

服务器操作系统选择ubuntu16.04或以上，切记服务器选择linux ubuntu，别问为什么，反正就是windows服务器被嫌弃。像superset和ClickHouse压根就不支持windows，只能用在mac和linux上（二者都是基于unix）。

另外，阿里云的服务器首次购买是可以享受N天无理由退款的，具体多少天可以搜一搜，如果想退货再重新购买需要趁早。遇到双11双12，服务器的价格折扣很大，还是挺实惠的。学生凭学生证购买也可以享受折扣。

到这里的话第1步就OK了。操作系统的基本环境配置，等做完了第3步再回来弄。为什么呢？往下面看就知道了。



### 2. 购买域名

在阿里云官网顶部搜索栏中搜索`域名购买`，然后进入域名购买页面，搜索自己喜欢的域名，各种域名因有尽有：`.com`, `.cn`, `.org`, `.me`, `.info`等等，琳琅满目，像我就是买的`liangfan.tech`。

一般而言， `.com`的域名会比其他的贵一些。这个可以自己根据经济情况和喜好拿捏。

域名的话建议3年起买，我是购买的3年。因为域名到期后再续费，价格是肯定比初次购买要贵的，所以如果经济条件允许，最好是多买几年。

另外，建议服务器和域名都在阿里云购买，一来阿里云服务稳定，价格还算公道；二来后面备案等也较为方便。



### 3. 域名备案

这应该是所有步骤里面最耗时的一步了，所以先把这一步给处理了，其实中间是有很多时间是把弄其它的东西的。

啥是域名备案呢？其实就是到z+f那里去注册下、实名下。具体原因嘛，你懂的， 大天朝，毕竟没有west world那么free。工信部规定，没有备案的域名，是打不开网站的，而且还会受到法律的制裁。

当然你也可以申请国外的服务器，然后将博客部署在国外网站上面，是不用备案的，但是访问速度就不敢保证了，而且会不会被wall也难说。

域名备案，在阿里云首页搜索`域名备案`进入相应页面即可开始操作了。

域名备案需要用到身份证信息、前面申请的服务器的公网IP、填写备案材料、申请幕布并拍照邮寄材料等等一系列流程，总之比较繁杂，这部分需要在阿里云的指引下一步步完成。

从申请备案到通过大概需要3-4周的时间。这段时间可以跳过第4步，进行5-10的步骤，先在本地部署和演练。



### 4. 域名解析

所谓域名解析，就是说将你的文字域名（如`liangfan.tech`）映射到数据域名（如117.41.12.13）上。

登录阿里云官网后，进入控制台-域名点击进入就可以看见自己名下的域名列表，点击解析域名后添加记录。

这里添加两个解析记录即可，两个记录的的`记录类型`均是A，主机记录一个是`www`一个是`@`，解析线路都选择`默认`，记录值均是自己的公网IP，TTL10分钟。

这两个解析记录的含义是说，将域名`xxxx.xx`和`www.xxxx.xx`均解析到公网IP上，这样在浏览器输入网址的时候加wwww或者不加均可访问网站。

由于阿里云ESC弹性服务器已经对网络访问进行了优化，因此是不需要进行`cname`解析的，不要被网上的杂论带歪了。

这个时候域名相关的工作基本就完结了。可以在本地的电脑的`Terminal`中分别`ping`一下公网数字IP和自己的文字域名看下通不通，如果不停出现类似`64 bytes from xx.xx.xxx.xxx: icmp_seq=0 ttl=52 time=7.879 ms`的内容，那么说明域名解析成功，可以进行下一步了。 --&gt;

&lt;!-- 
### 5. 在本地电脑和服务器间传输数据/文件

&amp;nbsp;

&gt; 关于在服务器和本地之间传输数据或文件，网上资料很多，比如借助第三方软件等。这里介绍的方法不使用软件，而是直接使用`ssh`来实现连接和传输。
如果需要将文件传输到指定文件夹下，可以先用命令`ssh root@your_public_ip_address`并输入密码来远程登录服务器，并使用`mkdir dirB`来创建目标文件夹。



##### 5.1 使用`scp`来传输单个文件（本地上传到服务器）

- 语法为`scp fileA dirB`也就是`scp 来源地 目的地`的模式，将文件传输至服务器目录下，例如：`scp /Volumes/your_local_file.txt root@your_public_ip_address:/var/mydata/`



##### 5.2 使用`rsync -P --rsh=ssh` 上传文件且支持断点续传，`ctrl+z`暂停，`bg`恢复

- 例如：`rsync -P --rsh=ssh /Volumes/data/bank_train.csv root@your_public_ip_address:/var/mydata/`



##### 5.3 使用`scp -r`来传输文件夹（本地上传到服务器）

- 语法为`scp -r dirA dirB`，将文件夹传输至服务器目录下，例如：`scp -r /Volumes/your_local_dir root@your_public_ip_address:/var/mydata/`



##### 5.4 使用`rsync -a`来同步文件夹

- 例如：`rsync -a /Users/Documents/my-blog/_site/  root@your_public_ip_address:/tomcat/webapps/ROOT`，此种方法不会传输文件夹下所有的文件，而是会去比对两个文件夹下的文件异同，只会将前者下面有的文件而后者没有的进行同步，如果是那种需要经常更新的文件夹，使用此种方法的话传输的数据量会大大减小（不必要每次都全文件夹传输）。

- 另外注意`_site`后面的`/`号，如果有说明是同步目录底下的各个文件过去（目标文件夹文件结构会成为`/ROOT/*files`），如果没有那么会直接传输整体文件夹（目标文件夹文件结构会成为`/ROOT/_site/*files`）



##### 5.5 使用`rm`命令来删除文件/文件夹

- 使用`rm file`来删除单个文件，使用`rm -r dir`来删除整个文件夹，使用`rm -rf dir`来无视任何条件的直接删除文件夹（不会有反馈和警告，直接删除）




具体是从服务器传输到本地，还是从本地传输到服务器，自己调整来源地和目的地的顺序即可。

&gt; 待续~~~

&amp;nbsp;
&amp;nbsp;
 --&gt;

&lt;h3 id=&quot;6-配置jdk&quot;&gt;6. 配置jdk&lt;/h3&gt;

&lt;p&gt;首先需要安装的是oracle版本的jdk（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java Development Kit&lt;/code&gt;），不是jre（jre是java程序的运行环境，不是编译和开发环境），也不是open jdk。&lt;/p&gt;

&lt;p&gt;配置jdk需执行如下几步操作：&lt;/p&gt;

&lt;p&gt;1）从&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;oracle官网下载jdk8&lt;/a&gt;，注意下载对应的版本（操作系统、32位/64位）；以ubuntu64位为例，下载linux x64以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tar.gz&lt;/code&gt;为结尾的文件即可&lt;/p&gt;

&lt;p&gt;2）将文件上传至远程服务器预先建立好的文件夹并解压&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;# 服务器端
mkdir /java

# 本地
scp /Users/liang/Downloads/jdk-8u191-linux-x64.tar.gz root@your_public_ip:/java

# 解压文件
cd /java
tar -zxvf jdk-8u191-linux-x64.tar.gz
ls -l /java/jdk1.8.0_191
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3）设置java_home环境&lt;br /&gt;
先打开配置文件，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo vi /etc/profile&lt;/code&gt; &lt;br /&gt;
然后将下面的代码复制进profile文件&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;#set Java environment
export JAVA_HOME=/java/jdk1.8.0_191
export JRE_HOME=$JAVA_HOME/jre
export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH
export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi文件编辑tips: 按i键进入编辑模式 -&amp;gt; 上下位移到空白位置 -&amp;gt; paste粘贴内容 -&amp;gt; esc退出编辑 -&amp;gt; :wq保存退出&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4）使环境配置生效，并查看配置结果&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;source /etc/profile
java -version
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; 
 &lt;/p&gt;

&lt;h3 id=&quot;7-在本地配置jekyll&quot;&gt;7. 在本地配置jekyll&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;jekyll是一个静态网页生成工具，可以理解为对网页代码/资源进行有效组织和编译。所谓静态，就是说没有数据交互，页面状态和内容是写死的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;jekyll配置在服务端或者本地都是ok的，但是由于我们采取的方式是先将博客文件在本地编辑、编译，测试、浏览、修改确认没问题后再上传到服务器端，所以在本地配置jekyll就ok了。下面简单介绍下mac或者ubuntu如何配置jekyll，更详细的配置步骤可以去&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;jekyll官网&lt;/a&gt;自行查看。&lt;/p&gt;

&lt;p&gt;ubuntu配置jekyll有如下几个步骤：&lt;/p&gt;

&lt;p&gt;1）安装ruby及配置环境&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;sudo apt-get install ruby-full build-essential zlib1g-dev

echo '# Install Ruby Gems to ~/gems' &amp;gt;&amp;gt; ~/.bashrc
echo 'export GEM_HOME=&quot;$HOME/gems&quot;' &amp;gt;&amp;gt; ~/.bashrc
echo 'export PATH=&quot;$HOME/gems/bin:$PATH&quot;' &amp;gt;&amp;gt; ~/.bashrc
source ~/.bashrc
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2）安装jekyll和paginate&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;gem install jekyll bundler 
gem install jekyll-paginate
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3）测试是否安装成功&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;jekyll -version
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; 
 &lt;/p&gt;

&lt;h3 id=&quot;8-使用hux-blog-theme&quot;&gt;8. 使用Hux Blog Theme&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;上面已经安装了静态博客生成工具，那么接下来就是要配置博客内容工具或者主题了。所谓主题，一是方便博客的书写和格式化内容，二是使博客看起来美观。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里使用的是一个阿里前端小哥的开源博客主题，叫 &lt;a href=&quot;https://github.com/huxpro/huxpro.github.io/&quot;&gt;Hux Blog Theme&lt;/a&gt;，它是在jekyll的基础上开发的一个很美观的博客主题。直接下载下来并配合之前安装的jekyll即可在本地使用了。&lt;/p&gt;

&lt;p&gt;将Hux的github源码下载到本地某个文件夹下，然后执行如下代码：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;cd /huxblog-boilerplate
jekyll serve
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果出现类似以下内容，那么大功告成：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Configuration file: /Volumes/SCALA/html/my-blog/_config.yml
            Source: /Volumes/SCALA/html/my-blog
       Destination: /Volumes/SCALA/html/my-blog/_site
 Incremental build: disabled. Enable with --incremental
      Generating... 
                    done in 1.157 seconds.
 Auto-regeneration: enabled for '/Volumes/SCALA/html/my-blog'
    Server address: http://127.0.0.1:4000/
  Server running... press ctrl-c to stop.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时，在浏览器中输入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://127.0.0.1:4000/&lt;/code&gt;是可以看见渲染后的博客内容的。&lt;/p&gt;

&lt;p&gt;关于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hux Blog Theme&lt;/code&gt;注意如下几个问题：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;是配置文件&lt;/li&gt;
  &lt;li&gt;博文编辑&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt;文件夹下的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;markdown&lt;/code&gt;文件即可，文件命名格式为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yyyy-mm-dd-fileName.markdown&lt;/code&gt;文件名及路径会显示在浏览器的URL中；博文标题和格式是由markdown文件的顶部内容控制的；博文顶部背景图片以深色系为佳（因为标题字是白色的）&lt;/li&gt;
  &lt;li&gt;编译后的内容存放在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt;文件夹下，这个后面需要用到&lt;/li&gt;
  &lt;li&gt;后续博文编辑修改均可先在本地查看确认后再上传至服务器端&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;开启服务，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;编译（其实开启服务的过程也是包含编译的，只需要编译可以使用jekyll build）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;待续~~~&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- &lt;ul type=&quot;circle&quot;&gt;
	&lt;li&gt;_config.yml是配置文件&lt;/li&gt;
&lt;/ul&gt; --&gt;

&lt;p&gt; 
 &lt;/p&gt;

&lt;!-- ### 9. 配置Tomcat

&amp;nbsp;
&amp;nbsp;

### 10. 将编译后的博客文件同步至服务器端

&amp;nbsp;
&amp;nbsp;

### 11. 注意阿里云的端口访问限制
控制台-云服务器ESC-网络和安全-安全组-配置规则


Enjoy your personal website and keep writing！




&amp;nbsp;
&amp;nbsp;
 --&gt;

</description>
        <pubDate>Tue, 18 Dec 2018 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/12/18/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E4%B8%8A%E7%BA%BF%E4%B9%8B3/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/18/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E4%B8%8A%E7%BA%BF%E4%B9%8B3/</guid>
        
        <category>jekyll</category>
        
        <category>Tomcat</category>
        
        <category>阿里云服务器</category>
        
        <category>个人网站</category>
        
        
      </item>
    
      <item>
        <title>由归纳演绎法向工作思维方式漫谈开去</title>
        <description>&lt;p&gt; &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;最近在钻研函数式编程（Functional Programming），可以说是对我的思维方式和对事物的看法产生了很大的影响。函数式编程将编程理解为纯函数式操作，将世界解构为操作对象和操作符（输入、输出和函数），它的设计理念从最开始就是将事物从最开始进行原子化解剖，用函数来连接原子进行操作，然后将这些原子一层层累加，最后筑成自己想要的高楼大厦。一个形象的说法是，面向对象（Object Oriented,OO）就像是归纳法；而函数式编程（FP）就像是演绎法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;什么是归纳法&quot;&gt;什么是归纳法&lt;/h4&gt;
&lt;p&gt;所见：小猫A爱吃鱼❤️；小猫B爱吃鱼❤️；小猫C爱吃鱼❤️；&lt;br /&gt;
所得：猫爱吃鱼。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&quot;什么是演绎法&quot;&gt;什么是演绎法&lt;/h4&gt;
&lt;p&gt;所见：猫爱吃鱼❤️；有只小猫B；&lt;br /&gt;
所得：小猫B会喜欢吃鱼。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&quot;由此而谈及2种的典型工作思维方式&quot;&gt;由此而谈及2种的典型工作思维方式&lt;/h4&gt;

&lt;p&gt;今天要谈的却并不是函数式编程，也不是演绎法与归纳法的区别和联系，而是工作思维方式。&lt;/p&gt;

&lt;p&gt;如果用演绎法和归纳法类比，那么会有两种比较迥异的工作思维：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;font color=&quot;red&quot;&gt;&lt;b&gt;归纳法式工作思维&lt;/b&gt;&lt;/font&gt;
    &lt;p&gt;一切以需求为依归，提一个需求做一个需求，不提需求就不做。问他为什么没做，因为你没给我提需求。这种工作思维方式是典型的需求驱动，具体的需求具体分析具体来做，需求无穷尽也，工作自然无穷尽也。最重要的是，对于需求的人而言你的响应效率低下；对于你自己而言，久了你会腻烦觉得别人在挑刺。（到底要经历多少特殊，才能归纳出普遍性呢？）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;font color=&quot;red&quot;&gt;&lt;b&gt;演绎法式工作思维&lt;/b&gt;&lt;/font&gt;
    &lt;p&gt;需求之外思考从底层构建一个能满足所有人的系统，然后再通过一个一个的需求实践让系统丰满和更强大，不断迭代。所有人在这个系统中也许都无法直接得到自己想要的，但是却可以辅助一些自己的加工来满足更加个性化的需求。由于面向通用化需求，因而能更高效运转。（由普遍，而推及一个一个的特殊）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以具体需求为依归，终究会疲于奔命。小型团队可以如此，但是随着团队规模的扩张需求爆发，其可复制性荡然无存，且效率愈来愈低下。&lt;/p&gt;

&lt;p&gt;演绎法工作思维其实体现的是更积极主动的工作态度，以及对于业务/结构较于普罗大众更加深刻的思考过程，它考验个人的前瞻性和把控能力，但这也正是其魅力和挑战所在。当然，没有一定的经验是无法实现从归纳式工作思维向演绎法式工作思维的转变的，但是更重要的是，要时时刻刻有这种转变的意识。&lt;/p&gt;

&lt;p&gt;很显然，演绎法式工作思维，能让你走得更远，步伐也更加坚实。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2017年12月17日有感于为什么很难跟很多人沟通 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;什么叫构建底层数据&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/my-post/20181217.jpg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;!-- - 非结构化到结构化的过程
- 以所有人的需求为视角来创建数据明细
- 分主题解析/按照更新频率
- 极大可能保留原始数据信息，或者不损失任何信息
- 不做任何计算上的聚合（相当于ETL中的Extract）(不需要做数据规范化处理) --&gt;

&lt;ul type=&quot;circle&quot;&gt;
 &lt;li&gt;非结构化到结构化的过程&lt;/li&gt;
 &lt;li&gt;以所有人的需求为视角来创建数据明细&lt;/li&gt;
 &lt;li&gt;分主题解析/按照更新频率&lt;/li&gt;
 &lt;li&gt;极大可能保留原始数据信息，或者不损失任何信息&lt;/li&gt;
 &lt;li&gt;不做任何计算上的聚合（相当于ETL中的Extract）(不需要做数据规范化处理)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; 
 &lt;/p&gt;

</description>
        <pubDate>Mon, 17 Dec 2018 20:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/12/17/%E7%94%B1%E5%BD%92%E7%BA%B3%E4%B8%8E%E6%BC%94%E7%BB%8E%E6%B3%95%E5%90%91%E5%B7%A5%E4%BD%9C%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F%E6%BC%AB%E8%B0%88%E5%BC%80%E5%8E%BB/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/17/%E7%94%B1%E5%BD%92%E7%BA%B3%E4%B8%8E%E6%BC%94%E7%BB%8E%E6%B3%95%E5%90%91%E5%B7%A5%E4%BD%9C%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F%E6%BC%AB%E8%B0%88%E5%BC%80%E5%8E%BB/</guid>
        
        <category>归纳</category>
        
        <category>演绎</category>
        
        <category>工作思维</category>
        
        
      </item>
    
  </channel>
</rss>
