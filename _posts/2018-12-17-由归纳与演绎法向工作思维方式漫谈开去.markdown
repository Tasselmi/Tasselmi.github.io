---
layout:     post
title:      "由归纳演绎法向工作思维方式漫谈开去"
subtitle:   "————决定你能走多远的，永远是你的思维方式"
date:       2018-12-17 12:00:00
author:     "LiangFan"
header-img: "img/my-post/12.jpg"
tags:
    - 归纳
    - 演绎
    - 工作思维
 
---

&nbsp;

> 最近在钻研函数式编程（Functional Programming），可以说是对我的思维方式和对事物的看法产生了很大的影响。函数式编程将编程理解为纯函数式操作，将世界解构为操作对象和操作符（输入、输出和函数），它的设计理念从最开始就是将事物从最开始进行原子化解剖，用函数来连接原子进行操作，然后将这些原子一层层累加，最后筑成自己想要的高楼大厦。一个形象的说法是，面向对象（Object Oriented,OO）就像是归纳法；而函数式编程（FP）就像是演绎法。


#### 什么是归纳法
所见：小猫A爱吃鱼❤️；小猫B爱吃鱼❤️；小猫C爱吃鱼❤️；<br>
所得：猫爱吃鱼。

&nbsp;

#### 什么是演绎法
所见：猫爱吃鱼❤️；有只小猫B；<br>
所得：小猫B会喜欢吃鱼。


&nbsp;

#### 由此而谈及2种的典型工作思维方式

今天要谈的却并不是函数式编程，也不是演绎法与归纳法的区别和联系，而是工作思维方式。


如果用演绎法和归纳法类比，那么会有两种比较迥异的工作思维：

- <font color="red"><b>归纳法式工作思维</b></font>
一切以需求为依归，提一个需求做一个需求，不提需求就不做。问他为什么没做，因为你没给我提需求。这种工作思维方式是典型的需求驱动，具体的需求具体分析具体来做，需求无穷尽也，工作自然无穷尽也。最重要的是，对于需求的人而言你的响应效率低下；对于你自己而言，久了你会腻烦觉得别人在挑刺。（到底要经历多少特殊，才能归纳出普遍性呢？）
- <font color="red"><b>演绎法式工作思维</b></font>
需求之外思考从底层构建一个能满足所有人的系统，然后再通过一个一个的需求实践让系统丰满和更强大，不断迭代。所有人在这个系统中也许都无法直接得到自己想要的，但是却可以辅助一些自己的加工来满足更加个性化的需求。由于面向通用化需求，因而能更高效运转。（由普遍，而推及一个一个的特殊）

以具体需求为依归，终究会疲于奔命。小型团队可以如此，但是随着团队规模的扩张需求爆发，其可复制性荡然无存，且效率愈来愈低下。

演绎法工作思维其实体现的是更积极主动的工作态度，以及对于业务/结构较于普罗大众更加深刻的思考过程，它考验个人的前瞻性和把控能力，但这也正是其魅力和挑战所在。当然，没有一定的经验是无法实现从归纳式工作思维向演绎法式工作思维的转变的，但是更重要的是，要时时刻刻有这种转变的意识。

很显然，演绎法式工作思维，能让你走得更远，步伐也更加坚实。


&nbsp;

------

2017年12月17日有感于为什么很难跟很多人沟通 `什么叫构建底层数据`

![Alt text](/img/my-post/20181217.jpg) 

<!-- - 非结构化到结构化的过程
- 以所有人的需求为视角来创建数据明细
- 分主题解析/按照更新频率
- 极大可能保留原始数据信息，或者不损失任何信息
- 不做任何计算上的聚合（相当于ETL中的Extract）(不需要做数据规范化处理) -->

<ul type="circle">
 <li>非结构化到结构化的过程</li>
 <li>以所有人的需求为视角来创建数据明细</li>
 <li>分主题解析/按照更新频率</li>
 <li>极大可能保留原始数据信息，或者不损失任何信息</li>
 <li>不做任何计算上的聚合（相当于ETL中的Extract）(不需要做数据规范化处理)</li>
</ul>  



&nbsp;
&nbsp;















